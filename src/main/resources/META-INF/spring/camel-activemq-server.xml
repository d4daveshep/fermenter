<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<!-- START SNIPPET: e1 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:camel="http://camel.apache.org/schema/spring" xmlns:broker="http://activemq.apache.org/schema/core"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
         http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
         http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">
	<!-- END SNIPPET: e1 -->

	<!-- START SNIPPET: e2 -->
	<!-- let Spring do its IoC stuff in this package -->
	<context:component-scan base-package="nz.net.daveshep.fermenter.localrouter" />
	<!-- END SNIPPET: e2 -->

	<!-- spring property placeholder, ignore resource not found as the file 
		resource is for unit testing -->
	<!-- <context:property-placeholder location="classpath:camel.properties,file:target/custom.properties" 
		ignore-resource-not-found="true" /> -->
	<!-- START SNIPPET: e3 -->
	<!-- declare a camel context that scans for classes that is RouteBuilder -->
	<camel:camelContext id="camel-activemq-server">
		<camel:package>nz.net.daveshep.fermenter.localrouter</camel:package>
		<!-- enable JMX connector so we can connect to the server and browse mbeans -->
		<!-- Camel will log at INFO level the service URI to use for connecting 
			with jconsole -->
		<camel:jmxAgent id="agent" createConnector="true" />

		<camel:dataFormats>
			<camel:json id="json" library="Jackson"
				unmarshalTypeName="nz.net.daveshep.fermenter.beans.TemperatureReading" />
		</camel:dataFormats>

	</camel:camelContext>
	<!-- END SNIPPET: e3 -->

	<!-- START SNIPPET: e4 -->
	<!-- lets configure the ActiveMQ JMS broker server -->
	<broker:broker useJmx="true" persistent="true"
		brokerName="myBroker">
		<broker:transportConnectors>
			<!-- expose a VM transport for in-JVM transport between AMQ and Camel 
				on the server side -->
			<!-- <broker:transportConnector name="vm" uri="vm://myBroker" /> -->
			<!-- expose a TCP and a STOMP transport for clients to use -->
			<broker:transportConnector name="tcp"
				uri="tcp://localhost:61610" />
			<broker:transportConnector name="stomp"
				uri="stomp://localhost:61613" />
		</broker:transportConnectors>
		<broker:persistenceAdapter>
			<broker:kahaDB directory="activemq-data/data/kahaDB"
				journalMaxFileLength="32mb" />
		</broker:persistenceAdapter>
	</broker:broker>
	<!-- END SNIPPET: e4 -->

	<!-- START SNIPPET: e5 -->
	<!-- lets configure the Camel ActiveMQ to use the embedded ActiveMQ broker 
		declared above -->
	<bean id="localjms" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.spring.ActiveMQConnectionFactory">
				<property name="brokerURL" value="vm://myBroker" />
				<!-- <property name="trustAllPackages" value="true" /> -->
			</bean>
		</property>
	</bean>
	<bean id="remotejms" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.spring.ActiveMQConnectionFactory">
				<property name="brokerURL" value="tcp://54.201.254.241:61616" />
				<!-- <property name="trustAllPackages" value="true" /> -->
			</bean>
		</property>
	</bean>

	<bean id="temperatureReading" class="nz.net.daveshep.fermenter.beans.TemperatureReading" />

	<bean id="temperatureRecordToSql" class="nz.net.daveshep.fermenter.beans.TemperatureReadingToSql" />

	<!-- Sqlite datasource bean -->
<!-- 
	<bean id="sqlite"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.sqlite.JDBC" />
		<property name="url" value="jdbc:sqlite:test.db" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>

 -->
 	<bean id="postgresql"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:sqlite:test" />
		<property name="username" value="admin" />
		<!-- <property name="password" value="" /> -->
	</bean>

	<!-- Bean to initialize table in the DB -->
	<bean id="createTable" class="nz.net.daveshep.fermenter.sql.CreateTemperatureTable">
<!-- 		<constructor-arg ref="sqlite" /> -->
		<constructor-arg ref="postgresql" />
	</bean>

	<!-- END SNIPPET: e5 -->

</beans>
